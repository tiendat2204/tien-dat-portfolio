{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sticker-animation",
  "type": "registry:component",
  "files": [
    {
      "path": "src/registry/StickerCop/StickerCop.tsx",
      "content": "'use client'\r\nimport React, { useEffect, useState, useMemo, useCallback } from 'react'\r\nimport Image from 'next/image'\r\n\r\ninterface StickerProps {\r\n  id: string;\r\n  frameCount: number;\r\n  frameRate: number;\r\n  framesPerCol: number;\r\n  framesPerRow: number;\r\n  spriteImg: string;\r\n  className?: string;\r\n  frameSize?: number;\r\n  onStickerClick?: (id: string) => void; // Thêm prop mới\r\n}\r\n\r\nexport const StickerCop: React.FC<StickerProps> = ({\r\n  id,\r\n  frameCount,\r\n  frameRate,\r\n  framesPerCol,\r\n  framesPerRow,\r\n  spriteImg,\r\n  className = '',\r\n  frameSize = 64,\r\n  onStickerClick,\r\n}) => {\r\n  const [currentFrame, setCurrentFrame] = useState(0)\r\n  const [isHovered, setIsHovered] = useState(false)\r\n\r\n  const framePosition = useMemo(() => {\r\n    const currentCol = currentFrame % framesPerRow\r\n    const currentRow = Math.floor(currentFrame / framesPerRow)\r\n    return { col: currentCol, row: currentRow }\r\n  }, [currentFrame, framesPerRow])\r\n\r\n  const handleMouseEnter = useCallback(() => {\r\n    setIsHovered(true)\r\n  }, [])\r\n\r\n  const handleMouseLeave = useCallback(() => {\r\n    setIsHovered(false)\r\n    setCurrentFrame(0)\r\n  }, [])\r\n\r\n  const handleClick = useCallback(() => {\r\n    if (onStickerClick) {\r\n      onStickerClick(id)\r\n    } else {\r\n      console.log(`Sticker clicked: ${id}`)\r\n    }\r\n  }, [id, onStickerClick])\r\n\r\n  const containerStyle = useMemo(\r\n    () => ({\r\n      width: `${frameSize}px`,\r\n      height: `${frameSize}px`,\r\n    }),\r\n    [frameSize]\r\n  )\r\n\r\n  const spriteStyle = useMemo(\r\n    () => ({\r\n      width: `${framesPerRow * frameSize}px`,\r\n      height: `${framesPerCol * frameSize}px`,\r\n      transform: `translate(-${framePosition.col * frameSize}px, -${framePosition.row * frameSize}px)`,\r\n      transition: 'transform 0s',\r\n    }),\r\n    [framePosition, framesPerRow, framesPerCol, frameSize]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!isHovered) return\r\n\r\n    const frameInterval = setInterval(() => {\r\n      setCurrentFrame((prevFrame) => {\r\n        const nextFrame = (prevFrame + 1) % frameCount\r\n        return nextFrame\r\n      })\r\n    }, 1000 / frameRate)\r\n\r\n    return () => clearInterval(frameInterval)\r\n  }, [frameCount, frameRate, isHovered])\r\n\r\n  return (\r\n    <div className='hover:bg-gray-100/90 dark:hover:bg-neutral-700 px-1 cursor-pointer rounded-lg'>\r\n      <div\r\n        className='relative overflow-hidden'\r\n        style={containerStyle}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        onClick={handleClick}\r\n        data-testid={`sticker-${id}`}\r\n      >\r\n        <div className={`absolute ${className}`} style={spriteStyle}>\r\n          <Image\r\n            id={id}\r\n            src={spriteImg}\r\n            alt={`Sprite Animation ${id}`}\r\n            width={framesPerRow * frameSize}\r\n            height={framesPerCol * frameSize}\r\n            priority\r\n            unoptimized\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}